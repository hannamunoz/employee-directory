{"version":3,"sources":["components/Header/index.jsx","components/SearchBar/index.jsx","components/EmployeeTable/index.jsx","utils/API.js","components/Container/EmployeeContainer.jsx","App.js","serviceWorker.js","index.js"],"names":["Header","className","SearchBar","props","onSubmit","handleFormSubmit","value","name","onChange","hangleInputChange","type","placeholder","EmployeeTable","scope","data-field","data-sortable","onClick","sortBy","state","filteredEmployees","map","employee","first","last","fullName","dob","formatDate","date","src","picture","thumbnail","alt","href","phone","email","login","uuid","axios","get","EmployeeContainer","search","employees","sortDirections","initialSortDirections","handleInputChange","event","target","setState","toLowerCase","trim","preventDefault","key","primary","secondary","sortedEmployees","reverse","sort","a","b","localCompare","filterEmployees","input","filter","concat","includes","replace","Date","push","getMonth","slice","getDate","getFullYear","join","API","then","res","data","results","catch","err","console","log","this","Component","App","Boolean","window","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","registration","unregister","error","message"],"mappings":"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","file":"static/js/main.fcd08679.chunk.js","sourcesContent":["import React from \"react\";\nimport \"./style.css\";\n\nconst Header = () => {\n    return (\n        <header>\n            <h1 className=\"text-center\">Employee Directory</h1>\n            <p className=\"text-center\">\n                Click on headers to filter employees or use the search function to find your results.\n            </p>\n        </header>\n    );\n};\n\nexport default Header;","import React from \"react\";\nimport \"./style.css\";\n\nconst SearchBar = (props) => {\n    return (\n        <nav className=\"navbar navbar-light bg-light justify-content-center\">\n            <form className=\"form-inline m-2\" onSubmit={props.handleFormSubmit}>\n                <input\n                    className=\"form-control\"\n                    value={props.value}\n                    name=\"search\"\n                    onChange={props.hangleInputChange}\n                    type=\"search\"\n                    placeholder=\"Search\"\n                />\n            </form>\n        </nav>\n    );\n};\n\n\nexport default SearchBar;","import React from \"react\";\nimport \"./style.css\";\n\nconst EmployeeTable = (props) => {\n    return (\n        <table className=\"table table-striped table-sortable text-center\">\n            <thead>\n                <tr>\n                    <th scope=\"col\">Image</th>\n                    <th scope=\"col\" data-field=\"name\" data-sortable=\"true\">\n                        <span onClick={() => props.sortBy(\"name\", \"last\", \"first\")}>\n                            Name\n                        </span>\n                    </th>\n                    <th scope=\"col\">\n                        <span onClick={() => props.sortBy(\"phone\")}>\n                            Phone\n                        </span>\n                    </th>\n                    <th scope=\"col\">\n                        <span onClick={() => props.sortBy(\"email\")}>\n                            Email\n                        </span>\n                    </th>\n                    <th scope=\"col\">\n                        <span onClick={() => props.sortBy(\"dob\", \"date\")}>\n                            DOB\n                        </span>\n                    </th>\n                </tr>\n            </thead>\n            <tbody>\n                {props.state.filteredEmployees.map((employee) => {\n                    const { first, last } = employee.name;\n                    const fullName = `${first} ${last}`;\n\n                    // Format the date\n                    const dob = props.formatDate(employee.dob.date);\n\n                    return (\n                        <tr key={employee.login.uuid}>\n                            <td>\n                                <img src={employee.picture.thumbnail} alt={fullName} />\n                            </td>\n                            <td className=\"align-middle\">{fullName}</td>\n                            <td className=\"align-middle\">\n                                <a href={`tel:+1${employee.phone}`}>{employee.phone}</a>\n                            </td>\n                            <td className=\"align-middle email\">\n                                <a href={`mailto:${employee.email}`}>{employee.email}</a>\n                            </td>\n                            <td className=\"align-middle\">{dob}</td>\n                        </tr>\n                    );\n                })}\n            </tbody>\n        </table>\n    );\n};\n\n\nexport default EmployeeTable;","import axios from \"axios\";\n\nconst URL = \"https://randomuser.me/api/?results=75&nat=us\"\n\nexport default {\n    getEmployees : function() {\n        return axios.get(URL);\n    }\n};","import React, { Component } from \"react\";\nimport SearchBar from \"../SearchBar\";\nimport EmployeeTable from \"../EmployeeTable\";\nimport API from \"../../utils/API\";\n\nclass EmployeeContainer extends Component {\n    state = {\n        search: \"\",\n        employees: [],\n        filteredEmployees: [],\n        sortDirections: this.initialSortDirections,\n    };\n\n    get initialSortDirections() {\n        return {\n            name: \"\",\n            phone: \"\",\n            email: \"\",\n            dob: \"\",\n        };\n    }\n\n    componentDidMount() {\n        API.getEmployees()\n            .then((res) =>\n                this.setState({\n                    employees: res.data.results,\n                    filteredEmployees: res.data.results,\n                })\n            )\n            .catch((err) => console.log(err));\n    }\n\n    handleInputChange = (event) => {\n        const value = event.target.value;\n        this.setState({ search: value });\n        this.filteredEmployees(value.toLowerCase().trim());\n    };\n\n    handleFormSubmit = (event) => {\n        event.preventDefault();\n    };\n\n    // Sort by specified objects, if there are children, sort by primary child then secondary.\n    sortBy = (key, primary = 0, secondary = 0) => {\n        let sortedEmployees = this.state.filteredEmployees;\n        if (this.state.sortDirections[key]) {\n            this.setState({\n                filteredEmployees: sortedEmployees.reverse(),\n                sortDirections: {\n                    ...this.initialSortDirections,\n                    [key]: this.state.sortDirections[key] === \"asc\" ? \"desc\" : \"asc\",\n                },\n            });\n        } else {\n            sortedEmployees = this.state.filteredEmployees.sort((a, b) => {\n                a = a[key];\n                b = b[key];\n\n                if (primary) {\n                    if (secondary && a[primary] === b[primary]) {\n                        return a[secondary].localCompare(b[secondary]);\n                    }\n                    return a[primary].localCompare(b[primary]);\n                } else {\n                    return a.localCompare(b);\n                }\n            });\n\n            this.setState({\n                filteredEmployees: sortedEmployees,\n                sortDirections: {\n                    ...this.initialSortDirections,\n                    [key]: \"asc\",\n                },\n            });\n        }\n    };\n\n    filterEmployees = (input) => {\n        if (input) {\n            this.setState({\n                filteredEmployees: this.state.employees.filter((employee) => {\n                    return (\n                        employee.name.first\n                            .toLowerCase()\n                            .concat(\" \", employee.name.last.toLowerCase())\n                            .includes(input) ||\n                        employee.phone.includes(input) ||\n                        employee.phone.replace(/[^\\w\\s]/gi, \"\").includes(input) ||\n                        employee.email.includes(input) ||\n                        this.formatDate(employee.dob.date).includes(input)\n                    );\n                }),\n            });\n        } else {\n            this.setState({ filteredEmployees: this.state.employees });\n        }\n    };\n\n    formatDate = (date) => {\n        date = new Date(date);\n        let dob = [];\n        dob.push(('0' + (date.getMonth() + 1)).slice(-2));\n        dob.push(('0' + date.getDate()).slice(-2));\n        dob.push(date.getFullYear());\n\n        return dob.join(\"-\");\n    };\n\n    render() {\n        return (\n            <>\n                <SearchBar\n                    value={this.state.search}\n                    handleInputChange={this.handleInputChange}\n                    handleFormSubmit={this.handleFormSubmit}\n                />\n                <div className=\"container mt-4\">\n                    <EmployeeTable\n                        state={this.state}\n                        sortBy={this.sortBy}\n                        filterEmployees={this.filterEmployees}\n                        formatDate={this.formatDate}\n                    />\n                </div>\n            </>\n        );\n    }\n\n}\n\nexport default EmployeeContainer;\n","import React from \"react\";\nimport \"./App.css\";\nimport Header from \"./components/Header\";\nimport EmployeeContainer from \"./components/Container/EmployeeContainer\";\n\nconst App = () => {\n  return (\n    <>\n    <Header />\n    <EmployeeContainer />\n    </>\n  );\n};\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n    window.location.hostname === 'localhost' ||\n      // [::1] is the IPv6 localhost address.\n      window.location.hostname === '[::1]' ||\n      // 127.0.0.0/8 are considered localhost for IPv4.\n      window.location.hostname.match(\n        /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n      )\n  );\n  \n  export function register(config) {\n    if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n      // The URL constructor is available in all browsers that support SW.\n      const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n      if (publicUrl.origin !== window.location.origin) {\n        // Our service worker won't work if PUBLIC_URL is on a different origin\n        // from what our page is served on. This might happen if a CDN is used to\n        // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n        return;\n      }\n  \n      window.addEventListener('load', () => {\n        const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n  \n        if (isLocalhost) {\n          // This is running on localhost. Let's check if a service worker still exists or not.\n          checkValidServiceWorker(swUrl, config);\n  \n          // Add some additional logging to localhost, pointing developers to the\n          // service worker/PWA documentation.\n          navigator.serviceWorker.ready.then(() => {\n            console.log(\n              'This web app is being served cache-first by a service ' +\n                'worker. To learn more, visit https://bit.ly/CRA-PWA'\n            );\n          });\n        } else {\n          // Is not localhost. Just register service worker\n          registerValidSW(swUrl, config);\n        }\n      });\n    }\n  }\n  \n  function registerValidSW(swUrl, config) {\n    navigator.serviceWorker\n      .register(swUrl)\n      .then(registration => {\n        registration.onupdatefound = () => {\n          const installingWorker = registration.installing;\n          if (installingWorker == null) {\n            return;\n          }\n          installingWorker.onstatechange = () => {\n            if (installingWorker.state === 'installed') {\n              if (navigator.serviceWorker.controller) {\n                // At this point, the updated precached content has been fetched,\n                // but the previous service worker will still serve the older\n                // content until all client tabs are closed.\n                console.log(\n                  'New content is available and will be used when all ' +\n                    'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n                );\n  \n                // Execute callback\n                if (config && config.onUpdate) {\n                  config.onUpdate(registration);\n                }\n              } else {\n                // At this point, everything has been precached.\n                // It's the perfect time to display a\n                // \"Content is cached for offline use.\" message.\n                console.log('Content is cached for offline use.');\n  \n                // Execute callback\n                if (config && config.onSuccess) {\n                  config.onSuccess(registration);\n                }\n              }\n            }\n          };\n        };\n      })\n      .catch(error => {\n        console.error('Error during service worker registration:', error);\n      });\n  }\n  \n  function checkValidServiceWorker(swUrl, config) {\n    // Check if the service worker can be found. If it can't reload the page.\n    fetch(swUrl, {\n      headers: { 'Service-Worker': 'script' },\n    })\n      .then(response => {\n        // Ensure service worker exists, and that we really are getting a JS file.\n        const contentType = response.headers.get('content-type');\n        if (\n          response.status === 404 ||\n          (contentType != null && contentType.indexOf('javascript') === -1)\n        ) {\n          // No service worker found. Probably a different app. Reload the page.\n          navigator.serviceWorker.ready.then(registration => {\n            registration.unregister().then(() => {\n              window.location.reload();\n            });\n          });\n        } else {\n          // Service worker found. Proceed as normal.\n          registerValidSW(swUrl, config);\n        }\n      })\n      .catch(() => {\n        console.log(\n          'No internet connection found. App is running in offline mode.'\n        );\n      });\n  }\n  \n  export function unregister() {\n    if ('serviceWorker' in navigator) {\n      navigator.serviceWorker.ready\n        .then(registration => {\n          registration.unregister();\n        })\n        .catch(error => {\n          console.error(error.message);\n        });\n    }\n  }","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport App from './App';\nimport * as serviceWorker from \"./serviceWorker\";\n\nReactDOM.render(\n    <App />,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nserviceWorker.unregister();\n"],"sourceRoot":""}